name: Maestro Android E2E Tests

on:
  # Run tests whenever code is pushed to main or a Pull Request is opened
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  maestro_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 1. Set up Java 17 (as requested)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 2. Install Maestro CLI (using cURL for Linux/Ubuntu runners)
      - name: Install Maestro CLI
        run: |
          # Use the official install script for Maestro CLI
          curl -Ls "https://install.maestro.mobile.dev" | bash
          # Add Maestro to the PATH for subsequent steps
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          # Verify installation
          maestro -v

      # 3. Start Android Emulator with the latest version
      # Note: We use a standard GitHub action for robust emulator setup
      - name: Run Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34 # Use a recent API level (Android 14)
          target: default
          arch: x86_64
          force-avd-creation: false
          emulator-options: -cores 2 -memory 4096M -no-snapshot-save
          disable-animations: true
          # Note: We skip the app installation here, assuming the 'maestro test' command handles it if needed.

      # 4. Install the application (samples/wikipedia.apk)
      - name: Install Target APK
        run: adb install -r samples/wikipedia.apk
        # The APK needs to be available in the repository path 'samples/wikipedia.apk'

      # 5. Run Maestro tests and generate JUnit report
      - name: Execute Maestro Flow & Generate Report
        id: maestro_run
        # The 'maestro test' command can automatically launch the app and run the flow.
        # We redirect the JUnit output to a file for artifact storage.
        run: |
          echo "Running Maestro tests using the flow maestro-android.yaml"
          # Run the test, outputting results in JUnit XML format
          maestro test maestro-android.yaml --format junit > maestro-report.xml

      # 6. Upload the generated test report
      - name: Upload Test Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: maestro-test-report
          path: maestro-report.xml
          retention-days: 5
