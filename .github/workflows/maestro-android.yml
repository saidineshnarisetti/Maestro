name: Maestro Android E2E Test on Emulator

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  maestro_e2e_android:
    # Use macos-latest as it is an Apple Silicon (aarch64) runner, which is required
    # for the faster ARM emulator images.
    runs-on: macos-latest 

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Java 17
      # Requirement: Java 17 or higher
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Maestro CLI via Homebrew
      # Requirement: brew install maestro
      run: |
        brew tap mobile-dev-inc/tap
        brew install maestro
        # Add Maestro to PATH explicitly for the subsequent 'script' block
        export PATH="$PATH:$HOME/.maestro/bin"

    - name: Run Android Emulator and Maestro Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30 
        target: google_apis 
        profile: Nexus 5
        
        # ðŸŸ¢ FIX: The action supports 'arm64-v8a' for ARM runners, not 'arm64'.
        # This resolves the "Value for input.arch 'arm64' is unknown" error.
        arch: arm64-v8a 
        
        script: |
          # The emulator is ready and adb is available in the PATH here.
          
          # 1. Install the APK
          APK_PATH="./samples/wikipedia.apk" 
          echo "Installing $APK_PATH on emulator..."
          adb install $APK_PATH
          
          # 2. Run the specified Maestro flow and generate the JUnit report
          MAESTRO_REPORT_PATH="maestro-report.xml"
          MAESTRO_FLOW_PATH="./samples/android-test.yaml"
          
          echo "Running Maestro flow: $MAESTRO_FLOW_PATH"
          
          # The || true ensures the job proceeds to the report upload step even if a test fails.
          maestro test \
            $MAESTRO_FLOW_PATH \
            --format junit \
            --output $MAESTRO_REPORT_PATH \
            || true 
          
          # 3. Prepare report for artifact upload
          mkdir -p maestro-reports
          if [ -f $MAESTRO_REPORT_PATH ]; then
            mv $MAESTRO_REPORT_PATH maestro-reports/
            echo "Maestro test run complete. Report moved to maestro-reports/."
          else
            echo "Warning: Maestro report file ($MAESTRO_REPORT_PATH) not found. Check the Maestro run logs."
          fi

    - name: Upload Test Report Artifact
      # Run this step always so you can see the report regardless of test outcome.
      if: always() 
      uses: actions/upload-artifact@v4
      with:
        name: maestro-junit-report
        path: maestro-reports/maestro-report.xml
